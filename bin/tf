#!/bin/bash

set -eo pipefail
[ ! -z "${TRACE:-}" ] && set -x

log() {
  echo "* [${2:-INFO}] $1"
}

die() {
  log >&2 "$1" "ERROR"
  exit 1
}

usage() {
  echo """
  usage: $0 [-p <project>] [-e <environment>] <provider>/<layer> <action>
    where
      -p project name (defaults to TF_VAR_project env var)
      -e environment name (defaults to TF_VAR_environment env var)
      provider is 'do', 'k8s', etc
      layer is 'core', etc
      action is one of 'plan', 'apply', or 'destroy'
  """
}

check_args() {
  if [ -z "$project" ] || \
     [ -z "$environment" ] || \
     [ -z "$provider" ] || \
     [ -z "$layer" ] || \
     [ -z "$action" ]; then
    usage
    die 'need args'
  fi
}

check_provisioner_archive_exists() {
  archive -p ${project} -e ${environment} -l ${layer} check
}

init_terraform() {
  state_key="infrastructure/${project}/${environment}/state/${provider}/${layer}.tfstate"
  TF_IN_AUTOMATION=true terraform init \
    -backend-config "${project_dir}/backend.tf" \
    -backend-config "key=${state_key}" \
    -no-color \
    -force-copy \
    -input=false \
    || die 'failed to init terraform'
}

run_terraform() {
  TF_IN_AUTOMATION=true terraform $action \
    -var "project=${project}" \
    -var "environment=${environment}" \
    -var "layer=${layer}" \
    -var "region=${region}" \
    -var "state_bucket=${state_bucket}" \
    -var-file "${project_dir}/terraform.tfvars" \
    -auto-approve \
    -no-color \
    -input=false \
    || die 'failed to run terraform'
}

graph_terraform() {
  #Options:

    #-draw-cycles   Highlight any cycles in the graph with colored edges.
                   #This helps when diagnosing cycle errors.

    #-no-color      If specified, output won't contain any color.

    #-type=plan     Type of graph to output. Can be: plan, plan-destroy, apply,
                   #validate, input, refresh.

  terraform $action \
    -type=plan-destroy \
    || die 'failed to run terraform graph'
}

main() {

  while getopts ':p:e:' OPT; do
    case $OPT in
      p) project_opt=$OPTARG ;;
      e) environment_opt=$OPTARG ;;
    esac
  done
  project=${project_opt:-$TF_VAR_project} # opt overrides env default
  environment=${environment_opt:-$TF_VAR_environment} # opt overrides env default

  shift $(($OPTIND - 1))
  provider_slash_layer=$1
  provider="${provider_slash_layer%%/*}"
  layer="${provider_slash_layer##*/}"
  action=$2
  check_args

  region="${TF_VAR_region:-ams3}"
  state_bucket="${TF_VAR_stack_state_bucket}" #"do-stacks-ams3"

  # change into the directory for the particular layer
  project_dir=$(git rev-parse --show-toplevel)

  check_provisioner_archive_exists \
    || die "no provisioner archive created"

  cd ${project_dir}/terraform/layers/${provider}/${layer} \
    || die "failed to find layer $layer for prodiver ${provider}"

  # clean up any cruft
  [ -d .terraform ] && rm -rf .terraform

  #create_state_bucket
  init_terraform

  case $action in
    graph)
      graph_terraform
      ;;
    *)
      run_terraform
      ;;
  esac

  #if [ "${action}" == "destroy" ]; then
    #remove_state
  #fi

}

main "$@"
